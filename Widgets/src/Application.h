#pragma once

#include <SDL2/SDL.h>
#include <stdio.h>
#include <vector>
#include <memory>
#include "Renderer.h"
#include "geom/Dimension.h"
#include "geom/Position.h"
#include "ui_widgets/Container.h"
#include "Collision.h"

class Application {
private:
	/**
	 * @private constant attribute
	 *
	 * Window's FPS.
	 * Should not exist in a near future.
	 */
	const unsigned int FPS = 60;

	/**
	 * @private constant attribute
	 *
	 * Delay between renders to achieve Application::FPS;
	 * Should not exist in a near future.
	 */
	const unsigned int FRAME_TARGET_TIME = 1000 / FPS;

	/**
	 * @private attribute
	 *
	 * Widget elements are currently stored here.
	 * Elements here are rendered and checked for click events.
	 */
	std::vector<Container *> clickable_elements;

	/**
	 * @private attribute
	 *
	 * SDL event holder used to hold processed events at Application::process_input.
	 */
	SDL_Event event;

	/**
	 * @private attribute
	 *
	 * SDL renderer reference.
	 * Should be initialized at Application::init.
	 */
	SDL_Renderer *renderer;

	/**
	 * @private attribute
	 *
	 * When enabled, there should be no more input handling or render.
	 */
	bool should_quit;

	/**
	 * @private attribute
	 *
	 * No description.
	 */
	int ticks_last_frame;

	/**
	 * @private attribute
	 * 
	 * SDL window reference.
	 * Should be initialized at Application::init.
	 */
	SDL_Window *window;

	/**
	 * @private method
	 * Function to get current delta time.
	 */
	float get_delta_time();

	/**
	 * @private method
	 *
	 * Init application state by setting up window and renderer.
	 *
	 * @returns bool true if initialized successfully, false otherwise.
	 */
	bool init();

	/**
	 * @private method
	 *
	 * Handle mouse press events processed by process_input.
	 *
	 * @param button Event generated by SDL and processed at process_input.
	 */
	void on_mouse_press(SDL_MouseButtonEvent &button);

	/**
	 * @private method
	 *
	 * Process SDL input events and call handlers.
	 */
	void process_input();

	/**
	 * @private method
	 *
	 * Call widgets, added through add_widget, render's method.
	 */
	void render();

	/**
	 * @public method
	 *
	 * No description.
	 */
	void update(float deltaTime);

public:
	/**
	 * @public constructor
	 * Call init function
	 */
	Application();

	/**
	 * @public destructor
	 * Destory window and quit SDL
	 */
	~Application();

	/**
	 * @public method
	 * 
	 * Add a widget to our application.
	 * Every widget added here will have it's render function called at every update.
	 * Widgets added through this method must all be based on Container.
	 * 
	 * @tparam T any element based on Container.
	 * @tparam TArgs arguments of any type to be used as element constructor arguments.
	 * @param[TArgs] args element constructor arguments.
	 */
	template<typename T, typename... TArgs>
	T* add_widget(TArgs... args);

	/**
	 * @public method
	 *
	 * Main application run method.
	 */
	void run();
};
